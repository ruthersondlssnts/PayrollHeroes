@{
    ViewData["Title"] = "Employees";
}
<div class="row">
    <div class="col-12">
        <div class="card">
            <!-- /.card-header -->
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <button type="button" class="btn btn-block btn-primary" id="process" onclick="ModalAddEdit('@Url.Action("AddOrEdit","Employee")','Employee Information')"><i class="fas fa-plus"></i> Create</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="employeetable" class="table table-bordered table-striped dt-responsive nowrap" style="width:100%">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th data-priority="1">Electronic Id</th>
                                    <th>Full Name</th>
                                    <th>Employee Serial</th>
                                    <th>Username</th>
                                    <th>Civil Status</th>
                                    <th>Date Hire</th>
                                    <th>Date Regular</th>
                                    <th>Department</th>
                                    <th>Position</th>
                                    <th>Roles</th>
                                    <th data-priority="2">Action</th>
                                </tr>
                            </thead>

                        </table>
                    </div>
                </div>

            </div>
            <!-- /.card-body -->

        </div>
    </div>
</div>
<!-- /.row -->
<!-- /.modal -->
<div class="modal fade" id="form-modal" tabindex="-1" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>

        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@section scripts {

    <script>
        function GetRolesAjax() {
            var roles = $("#Roles").val().split(',');
            var chckboxes = $('.form-check-input:checkbox')
            jQuery.each(roles, function (index1, item1) {
                jQuery.each(chckboxes, function (index2, item2) {
                    if (item1 == $(this).val()) {
                        $(this).prop('checked', true);
                    }
                });
            });


        }

        function GetShiftsAjax() {
            $.ajax({
                url: "/RefShift/GetShifts",
                type: "get",
                success: function (res) {
                    var s = '';
                    var data = res.data
                    for (var i = 0; i < data.length; i++) {
                        if ($("#hidden_shift").val() == data[i].shiftName)
                            s += '<option selected value="' + data[i].shiftName + '">' + data[i].shiftName + '</option>';
                        else
                            s += '<option value="' + data[i].shiftName + '">' + data[i].shiftName + '</option>';
                    }
                    $("#RefShift_ShiftName").html(s);
                },
                error: function (err) {
                    console.log(err)
                }
            });
        }

        function GetGroupsAjax() {

            $.ajax({
                url: "/RefGroup/GetGroups",
                type: "get",
                success: function (data) {
                    var s = '';
                    for (var i = 0; i < data.length; i++) {

                        if ($("#hidden_groupId").val() == data[i].id)
                            s += '<option selected value="' + data[i].id + '">' + data[i].groupName + '</option>';
                        else
                            s += '<option value="' + data[i].id + '">' + data[i].groupName + '</option>';
                    }
                    $("#GroupId").html(s);
                },
                error: function (err) {
                    console.log(err)
                }
            });

        }

        function FormSetup(isEdit) {
            var stepperEl = document.getElementById('stepper')
            stepper = new Stepper(stepperEl)

            //stepperEl.addEventListener('show.bs-stepper', function (event) {
            //    // You can call prevent to stop the rendering of your step
            //    // event.preventDefault()

            //    //event.preventDefault()
            //    //console.warn(event.detail.indexStep)
            //})

            //Date picker
            if (isEdit) {
                $('#date-hire').datetimepicker({
                    format: 'L',
                });
                $('#date-resign').datetimepicker({
                    format: 'L',
                });
            }
            else {
                $('#date-hire').datetimepicker({
                    format: 'L',
                    date: new Date()
                });
                $('#date-resign').datetimepicker({
                    format: 'L',
                });
            }

            GetShiftsAjax();
            GetRolesAjax();
            GetGroupsAjax();

            $(".custom-file-input").on("change", function () {
                if (!$(this).val()) {
                    if (!$("#PhotoPath").val()) {
                        $('#employeeimg').attr('src', "/employeephotos/no-img.png");
                    }
                    else {
                        $('#employeeimg').attr('src', "/employeephotos/" + $("#PhotoPath").val());
                    }
                }
            })

            $("#removeimg").click(function () {
                $(".custom-file-input").val("");
                $(".custom-file-label").html("Choose File...");
                if (!$("#PhotoPath").val()) {
                    $('#employeeimg').attr('src', "/employeephotos/no-img.png");
                }
                else {
                    $('#employeeimg').attr('src', "/employeephotos/" + $("#PhotoPath").val());
                }
            })

        }

        function PhotoChange(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#employeeimg').attr('src', e.target.result);
                };

                reader.readAsDataURL(input.files[0]);
                var filename = $(".custom-file-input").val().split("\\").pop();
                $(".custom-file-input").next(".custom-file-label").html(filename);
            }
            else {
                $(".custom-file-label").html("Choose File...");
            }
        }


        var stepper;
         //modal form pop up
        function ModalAddEdit(url, title, isEdit) {
            $.ajax({
                type: "GET",
                url: url,
                success: function (result) {
                    FormShowUser(result, null, title);
                    FormSetup(isEdit);
                },
                error: function () {
                    AlertError()
                }
            });
        }

        function jQueryAjaxPost(form) {
            var check_roles = $('.form-check-input:checkbox:checked').map(function (item) {
                return $(this).val();
            }).get();
            $("#Roles").val(check_roles.toString());
            $("#GroupName").val($("#GroupId :selected").text());

            try {

                $.ajax({
                    type: 'POST',
                    url: form.action,
                    data: new FormData(form),
                    contentType: false,
                    processData: false,
                    success: function (result) {
                        if (result.isValid) {
                            FormHide();
                            isSuccessPost = true;
                            AlertSuccess()
                        }
                        else {
                            FormShowUser(result.html,result.error)
                            isSuccessPost = false;
                            FormSetup();
                        }

                    },
                    error: function (err) {
                        FormHide();
                        isSuccessPost = false;
                        AlertError()
                        console.log(err)
                    }
                }).done(function () {
                    //unobstrusive validation
                    $("form").each(function () { $.data($(this)[0], 'validator', false); });
                    $.validator.unobtrusive.parse("form");
                });
                //to prevent default form submit event
                return false;
            } catch (ex) {
                isSuccessPost = false;
                FormHide();
                AlertError()
                console.log(ex)
            }
        }

        function jQueryAjaxDelete(form) {

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    try {
                        $.ajax({
                            type: 'POST',
                            url: form.action,
                            data: new FormData(form),
                            contentType: false,
                            processData: false,
                            success: function (result) {
                                employeeAjaxTable.ajax.reload(null, false);
                                AlertDeleted()

                            },
                            error: function () {
                                AlertError()
                            }
                        });
                    } catch (ex) {
                        console.log(ex)
                        AlertError()
                    }

                }
            })


            //prevent default form submit event
            return false;
        }

        var employeeAjaxTable = $("#employeetable").DataTable({
                ajax: {
                    url: "/Employee/GetEmployees",
                    type: "POST",
                    datatype: "json"
                },
                columnDefs: [
                    {  targets: '_all', defaultContent: '-' },
                    { targets: 0, className: 'dtr-control', orderable: false }
                ],
                columns: [
                    { defaultContent: "" },
                    {
                        data: "electronicId",name: "ElectronicId", autoWidth: true, render: function (data, type, row) {
                           return EditLink('@Url.Action("AddOrEdit","Employee")/'+row.id+'','Employee Information',data);
                        }
                    },
                    {
                        render: function (data, type, row) {
                            var src = row.photoPath ?? "person.jpg";
                            var img = '<img src="/employeephotos/'+ src +'" class="rounded-circle" style="width:20px;height:20px" />'
                            return img+" "+ row.firstName + " " + row.lastName
                        }
                    },
                    { data: "employeeSerial", name: "EmployeeSerial", autoWidth: true },
                    { data: "username", name: "Username", autoWidth: true },
                    { data: "maritalStatusName", name: "MaritalStatusName", autoWidth: true },
                    { data: "dateHire", name: "DateHire", autoWidth: true, render: function (data) { return moment(data).format("ll"); } },
                    { data: "dateRegular", name: "DateRegular", autoWidth: true, render: function (data) { return moment(data).format("ll"); } },
                    { data: "groupName", name: "GroupName", autoWidth: true },
                    { data: "position", name: "Position", autoWidth: true },
                    { data: "roles", name: "Roles", autoWidth: true },
                    {
                        render: function (data, type, row) {
                            return DeleteLink('@Url.Action("Delete", "Employee")/'+row.id+'');
                        }
                    },
                ],
                serverSide: "true",
                order: [2, "asc"],
                filter: true,
                processing: "true",
                language: {
                    "processing": "Processing... Please wait"
                }
            });

        $(document).ready(function () {

            //refresh grid after submit
            $('#form-modal').on('hidden.bs.modal', function () {
                if (isSuccessPost) {
                    employeeAjaxTable.ajax.reload(null, false);
                    isSuccessPost = false;
                }
            })

        });


    </script>

}