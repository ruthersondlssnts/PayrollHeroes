@{
    ViewData["Title"] = "Leave Balances";
}
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <button type="button" class="btn btn-block btn-primary" id="process" onclick="ModalAddEdit('@Url.Action("AddOrEdit","EmployeeBalance")','Employee Balance Information')"><i class="fas fa-plus"></i> Create</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="balancetable" class="table table-bordered table-striped dt-responsive nowrap" style="width:100%">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Name</th>
                                    <th>Leave Name</th>
                                    <th>Acquire</th>
                                    <th>Expiry</th>
                                    <th>Qty</th>
                                    <th>Remarks</th>
                                    <th data-priority="1">Action</th>
                                </tr>
                            </thead>

                        </table>
                    </div>
                </div>


            </div>
            <!-- /.card-body -->
        </div>
    </div>
</div>
<!-- /.row -->
<!-- /.modal -->
<div class="modal fade" id="form-modal" tabindex="-1" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>

        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>


@section scripts {

    <script>

        function FormSetup(isEdit) {
            AutoCompleteInitilize();
            GetLeaveTypesAjax();
            DatePickerSetup(isEdit)
        }
        function DatePickerSetup(isEdit) {
            if (isEdit) {
                $('#date-acquire').datetimepicker({
                    format: 'L',
                });
                $('#date-expire').datetimepicker({
                    format: 'L',
                });
            }
            else {
                $('#date-acquire').datetimepicker({
                    format: 'L',
                    date: moment()
                });
                $('#date-expire').datetimepicker({
                    format: 'L'
                });
            }


            $("#date-acquire").on("change.datetimepicker", function (e) {
                $('#date-expire').datetimepicker('minDate', e.date);
            });
            $("#date-expire").on("change.datetimepicker", function (e) {
                $('#date-acquire').datetimepicker('maxDate', e.date);
            });
        }
        function AutoCompleteInitilize() {
            var $input = $(".typeahead");
            GetEmployeesAjax().then(function (emps) {
                //set auto complete after getting employee names
                $input.typeahead({
                    source: emps.map(function (row) {
                        return { name: row.fullName, id: row.id }
                    }),
                    theme: "bootstrap4",
                });
            });

            $input.change(function () {
                var current = $input.typeahead("getActive");

                if (current) {
                    // Some item from your model is active!
                    if (current.name.toLowerCase() == $input.val().toLowerCase()) {
                        // This means the exact match is found. Use toLowerCase() if you want case insensitive match.
                        $("#EmployeeId").val(current.id);
                        $("#FullName").val(current.name);
                        setTimeout(function () {
                            $("#LeaveTypeId").focus();
                        }, 1);

                    } else {
                        // This means it is only a partial match, you can either add a new item
                        // or take the active if you don't want new items
                        $("#FullName").val("");
                        current = null;
                        setTimeout(function () {
                            $("#FullName").focus();
                        }, 1);

                    }
                } else {
                    $("#FullName").val("");
                    setTimeout(function () {
                        $("#FullName").focus();
                    }, 1);
                    // Nothing is active so it is a new value (or maybe empty value)
                }
            });
        }
        function GetLeaveTypesAjax() {
            $.ajax({
                url: "/RefLeaveType/GetLeaveTypes",
                type: "get",
                success: function (res) {
                    var s = '';
                    var val = res.data;
                    for (var i = 0; i < val.length; i++) {
                        if ($("#hidden_leavetype").val() == val[i].id)
                            s += '<option selected value="' + val[i].id + '">' + val[i].leaveTypeName + '</option>';
                        else
                            s += '<option value="' + val[i].id + '">' + val[i].leaveTypeName + '</option>';
                    }

                    $("#LeaveTypeId").html(s);
                },
                error: function (err) {
                    AlertError()
                    console.log(err)
                }
            });
        }
        function GetEmployeesAjax() {
            return $.ajax({
                type: "get",
                url: "/Employee/GetFullNames"
            });
        }


        function ModalAddEdit(url, title, isEdit) {
            $.ajax({
                type: "GET",
                url: url,
                success: function (result) {
                    FormShow(result, null, title)
                    FormSetup(isEdit);
                },
                error: function () {
                    AlertError()
                }
            });
        }

        function jQueryAjaxDelete(form) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    try {
                        $.ajax({
                            type: 'POST',
                            url: form.action,
                            data: new FormData(form),
                            contentType: false,
                            processData: false,
                            success: function (result) {
                                balanceAjaxTable.ajax.reload(null, false);
                                AlertDeleted()
                            },
                            error: function (result) {
                                AlertError()
                                console.log(result)
                            }
                        });
                    } catch (ex) {
                        AlertError()
                        console.log(ex)
                    }

                }
            })


            //prevent default form submit event
            return false;
        }

        function jQueryAjaxPost(form) {
            $("#LeaveTypeName").val($("#LeaveTypeId :selected").text());
            try {
                $.ajax({
                    type: 'POST',
                    url: form.action,
                    data: new FormData(form),
                    contentType: false,
                    processData: false,
                    success: function (res) {
                        if (res.isValid) {
                            FormHide();
                            isSuccessPost = true;
                            AlertSuccess()
                        }
                        else {
                            FormShow(res.html,res.error);
                            isSuccessPost = false;
                            FormSetup(true);
                        }

                    },
                    error: function (err) {
                        FormHide();
                        isSuccessPost = false;
                        console.log(err)
                        AlertError()
                    }
                }).done(function () {
                    //unobstrusive validation
                    $("form").each(function () { $.data($(this)[0], 'validator', false); });
                    $.validator.unobtrusive.parse("form");
                });
                //to prevent default form submit event
                return false;
            } catch (ex) {
                isSuccessPost = false;
                FormHide();
                AlertError()
                console.log(ex)
            }
        }

        var balanceAjaxTable = $("#balancetable").DataTable({
            ajax: {
                url: "/EmployeeBalance/GetEmployeeBalances",
                type: "GET",
                datatype: "json"
            },
            columnDefs: [
                {   targets: '_all', defaultContent: '-' },
                {   targets: 0, className: 'dtr-control', orderable: false }
            ],
            columns: [
                {   defaultContent: "" },
                {
                    data: "fullName", autoWidth: true, render: function (data, type, row) {
                        return EditLink('@Url.Action("AddOrEdit", "EmployeeBalance")/' + row.id + '', 'Employee Balance Information', data);
                    }
                },
                {   data: "leaveTypeName", autoWidth: true },
                {   data: "acquireDate", autoWidth: true, render: function (data) { return moment(data).format("ll"); } },
                {   data: "expireDate", autoWidth: true, render: function (data) { return moment(data).format("ll"); } },
                {   data: "quantity",  autoWidth: true },
                {   data: "remarks",  autoWidth: true },
                {
                    render: function (data, type, row) {
                      return DeleteLink('@Url.Action("Delete", "EmployeeBalance")/'+row.id+'');
                    }
                },
            ],
            order: [1, "asc"],
            filter: true,
            processing: "true",
            language: {
                "processing": "Processing... Please wait"
            }
        });

        $(document).ready(function () {

            //refresh grid after submit
            $('#form-modal').on('hidden.bs.modal', function () {
                if (isSuccessPost) {
                    balanceAjaxTable.ajax.reload(null, false);
                    isSuccessPost = false;
                }
            })

        });

    </script>

}
