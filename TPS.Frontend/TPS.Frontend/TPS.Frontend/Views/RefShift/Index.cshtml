@{
    ViewData["Title"] = "Shifts";
}
<div class="row">
    <div class="col-12">

        <div class="card">

            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <button type="button" class="btn btn-block btn-primary" id="process" onclick="ModalAddEdit('@Url.Action("AddOrEdit","RefShift")','Shift Information')"><i class="fas fa-plus"></i> Create</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="shifttable" class="table table-bordered table-striped dt-responsive nowrap" style="width:100%">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th data-priority="1">Shift Name</th>
                                    <th>Time In</th>
                                    <th>Time Out</th>
                                    <th>Required Hrs</th>
                                    @*<th>Break In</th>
                                        <th>BreakOut</th>
                                        <th>BreakHour</th>
                                        <th>NDStart</th>
                                        <th>NDEnd</th>
                                        <th>GracePeriod</th>
                                        <th>IncludeGracePeriod</th>
                                        <th>IsAutoOvertime</th>
                                        <th>IsNightDiff</th>*@
                                    <th data-priority="2">Action</th>
                                </tr>
                            </thead>

                        </table>
                    </div>
                </div>

                <!-- /.card-body -->
            </div>
        </div>
    </div>
    <!-- /.row -->
    <!-- /.modal -->
    <div class="modal fade" id="form-modal" tabindex="-1" data-keyboard="false" data-backdrop="static">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                </div>

            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
</div>


@section scripts {

    <script>
        var stepper;
        function FormSetup(isEdit) {
            var stepperEl = document.getElementById('stepper')
            stepper = new Stepper(stepperEl)

            $('#time-timein').datetimepicker({
                format: 'LT',
                date: $('#ShiftIn').val()
            });
            $('#time-timeout').datetimepicker({
                format: 'LT',
                date: $('#ShiftOut').val()
            });
            $('#time-breakin').datetimepicker({
                format: 'LT',
                date: $('#BreakIn').val()
            });
            $('#time-breakout').datetimepicker({
                format: 'LT',
                date: $('#BreakOut').val()
            });
            $('#time-ndstart').datetimepicker({
                format: 'LT',
                date: $('#NDStart').val()
            });
            $('#time-ndend').datetimepicker({
                format: 'LT',
                date: $('#NDEnd').val()
            });


            $("#time-timein").on("change.datetimepicker", function (e) {
                $('#ShiftIn').val(moment(e.date).format("HH:mm"));
            });
            $("#time-timeout").on("change.datetimepicker", function (e) {
                $('#ShiftOut').val(moment(e.date).format("HH:mm"));
            });
            $("#time-breakin").on("change.datetimepicker", function (e) {
                $('#BreakIn').val(moment(e.date).format("HH:mm"));
            });
            $("#time-breakout").on("change.datetimepicker", function (e) {
                $('#BreakOut').val(moment(e.date).format("HH:mm"));
            });
            $("#time-ndstart").on("change.datetimepicker", function (e) {
                $('#NDStart').val(moment(e.date).format("HH:mm"));
            });
            $("#time-ndend").on("change.datetimepicker", function (e) {
                $('#NDEnd').val(moment(e.date).format("HH:mm"));
            });

        }

        function ModalAddEdit(url, title) {
            $.ajax({
                type: "GET",
                url: url,
                success: function (result) {
                    FormShow(result, null, title)
                    FormSetup()
                }
            });
        }

        function jQueryAjaxDelete(form) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    try {
                        $.ajax({
                            type: 'POST',
                            url: form.action,
                            data: new FormData(form),
                            contentType: false,
                            processData: false,
                            success: function (result) {
                                shiftAjaxTable.ajax.reload(null, false);
                                AlertDeleted();
                            },
                            error: function (result) {
                                AlertError();
                            }
                        });
                    } catch (ex) {
                        AlertError();
                        console.log(ex)
                    }

                }
            })

            //prevent default form submit event
            return false;
        }

        function jQueryAjaxPost(form) {
            try {

                $.ajax({
                    type: 'POST',
                    url: form.action,
                    data: new FormData(form),
                    contentType: false,
                    processData: false,
                    success: function (res) {
                        if (res.isValid) {
                            FormHide();
                            isSuccessPost = true;
                            AlertSuccess()
                        }
                        else {
                            FormShow(res.html, res.error);
                            isSuccessPost = false;
                            FormSetup();
                        }
                    },
                    error: function (err) {
                        isSuccessPost = false;
                        FormHide();
                        AlertError()
                        console.log(err)
                    }
                }).done(function () {
                    //unobstrusive validation
                    $("form").each(function () { $.data($(this)[0], 'validator', false); });
                    $.validator.unobtrusive.parse("form");
                });
                //to prevent default form submit event
                return false;
            } catch (ex) {
                isSuccessPost = false;
                FormHide();
                AlertError()
                console.log(ex)
            }
        }

        var shiftAjaxTable = $("#shifttable").DataTable({
                ajax: {
                 url: "/RefShift/GetShifts",
                    type: "POST",
                    datatype: "json"
                },
                columnDefs: [
                    {   targets: '_all', defaultContent: '-' },
                    { targets: 0, className: 'dtr-control', orderable: false }
                ],
                columns: [
                    {   defaultContent: ""  },
                    {
                        data: "shiftName",  autoWidth: true, render: function (data, type, row) {
                            return EditLink('@Url.Action("AddOrEdit","RefShift")/'+row.id+'','Shift Information',data);
                        }
                    },
                    {   data: "shiftIn", autoWidth: true, render: function (data) { return moment(data,"HH").format("LT"); } },
                    {   data: "shiftOut", autoWidth: true, render: function (data) { return moment(data, "HH").format("LT"); } },
                    {
                        render: function (data, type, row) {
                            if (row.refShiftDetails == null) return "-";
                            else {
                                var totalHrs = 0;
                                $.each(row.refShiftDetails, function (i, v) {
                                    totalHrs += v.requiredHour;
                                });
                                return totalHrs;
                            }
                        }
                    },
                    {
                        render: function (data, type, row) {
                            return DeleteLink('@Url.Action("Delete","RefShift")/'+row.id+'');
                        }
                    },
                ],
                order: [1, "asc"],
                filter: true,
                processing: "true",
                language: {
                    "processing": "Processing... Please wait"
                }
            });

        $(document).ready(function () {


            //refresh grid after submit
            $('#form-modal').on('hidden.bs.modal', function () {
                if (isSuccessPost) {
                    shiftAjaxTable.ajax.reload(null, false);
                    isSuccessPost = false;
                }
            })

        });

    </script>

}
